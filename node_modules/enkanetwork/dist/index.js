"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnkaNetwork = void 0;
const axios_1 = require("axios");
const index_1 = require("./models/index");
const apiError_1 = require("./errors/apiError");
//@ts-ignore
const package_json_1 = require("../package.json");
const node_cache_1 = __importDefault(require("node-cache"));
class EnkaNetwork {
    constructor(data) {
        this.language = data.language || "EN";
        this.request = new axios_1.Axios({
            baseURL: "https://enka.network/api",
            timeout: 10 * 1000,
            validateStatus: function (status) {
                return status >= 200 && status < 300;
            },
            headers: {
                Accept: "application/json",
                ...(data.userAgent !== false && {
                    "User-Agent": typeof data.userAgent == "string"
                        ? data.userAgent
                        : `enkaNetwork@${package_json_1.version}`,
                }),
            },
        });
        this.request.interceptors.response.use((res) => res, (error) => Promise.reject(new apiError_1.APIError(error.response.status)));
        this.cache =
            data.caching !== false ? new node_cache_1.default({ checkperiod: 20 }) : undefined;
    }
    /**
     * Fetch user by uid from the game.
     * @param {number} uid `UID` from the game.
     * @param {string} language The language to be used in the localization of names (characters, artifacts, etc.). Default is EnkaNetwork.language.
     */
    async fetchPlayerInfo(uid, language = "EN") {
        var _a;
        let cache = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(`playerInfoByUID-${uid}-${language || this.language}`);
        if (cache)
            return cache;
        return this.request
            .get(`/uid/${uid}/?info`)
            .then((response) => JSON.parse(response.data))
            .then((data) => {
            var _a;
            const res = new index_1.FetchProfileInfo(language || this.language, data);
            (_a = this.cache) === null || _a === void 0 ? void 0 : _a.set(`playerInfoByUID-${uid}-${language || this.language}`, res, res.ttl);
            return res;
        });
    }
    /**
     * Fetch user by uid from the game.
     * @param {number} uid `UID` from the game.
     * @param {string} language The language to be used in the localization of names (characters, artifacts, etc.). Default is EnkaNetwork.language.
     */
    async fetchUser(uid, language = "EN") {
        var _a;
        let cache = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(`uid-${uid}-${language || this.language}`);
        if (cache)
            return cache;
        return this.request
            .get(`/uid/${uid}/`)
            .then((response) => JSON.parse(response.data))
            .then((data) => {
            var _a;
            const res = new index_1.FetchUserUID(language || this.language, data);
            (_a = this.cache) === null || _a === void 0 ? void 0 : _a.set(`uid-${uid}-${language || this.language}`, res, res.ttl);
            return res;
        });
    }
    /**
     * Fetch enkaProfile by username from the site.
     * @param {string} username `username` from the site.
     */
    async fetchProfile(username) {
        return this.request
            .get(`/profile/${username}/`)
            .then((response) => JSON.parse(response.data))
            .then((data) => new index_1.FetchUserProfile(data));
    }
    /**
     * Fetch enkaProfile accounts by username from the site.
     * @param {string} username `username` from the site.
     */
    async fetchProfileAccounts(username, language) {
        return this.request
            .get(`/profile/${username}/hoyos/`)
            .then((response) => JSON.parse(response.data))
            .then((data) => Object.keys(data).map((accountHash) => new index_1.FetchProfileAccount(language || this.language, data[accountHash])));
    }
    /**
     * Fetch enkaProfile account by username and account hash from the site.
     * @param {string} username `username` from the site.
     * @param {string} hash account `hash` from the account.
     */
    async fetchProfileAccount(username, hash, language) {
        return this.request
            .get(`/profile/${username}/hoyos/${hash}`)
            .then((response) => JSON.parse(response.data))
            .then((data) => new index_1.FetchProfileAccount(language || this.language, data));
    }
}
exports.EnkaNetwork = EnkaNetwork;
//# sourceMappingURL=index.js.map