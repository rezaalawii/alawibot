"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Character = void 0;
const getAssetUrl_1 = require("../../helpers/getAssetUrl");
const getNormalElement_1 = require("../../helpers/getNormalElement");
const getJsonAssets_1 = require("../../helpers/getJsonAssets");
const index_1 = require("../index");
const characterSkill_1 = require("./characterSkill");
const characterStats_1 = require("./characterStats");
class Character {
    constructor(lang, character) {
        var _a, _b, _c;
        const characterAsset = character.avatarId !== 10000007 && character.avatarId !== 10000005
            ? getJsonAssets_1.charactersAssets[character.avatarId]
            : Object.keys(getJsonAssets_1.charactersAssets)
                .map((x) => {
                if (getJsonAssets_1.charactersAssets[x].skills.includes(+Object.keys(character.skillLevelMap)[0]))
                    return getJsonAssets_1.charactersAssets[x];
            })
                .find((x) => (x === null || x === void 0 ? void 0 : x.iconName) ==
                (character.avatarId == 10000007
                    ? "UI_AvatarIcon_PlayerGirl"
                    : "UI_AvatarIcon_PlayerBoy")); //This is a temporary solution that first came to mind please don't hit.
        const characterLocalization = getJsonAssets_1.charactersLocalizations[characterAsset.nameTextMapHash];
        this.id = character.avatarId;
        this.name = characterLocalization[lang];
        this.rarity = characterAsset.qualityType == "QUALITY_ORANGE" ? 5 : 4;
        this.element = (0, getNormalElement_1.getNormalElement)(characterAsset.costElemType);
        this.icons = {
            avatar: (0, getAssetUrl_1.getAssetUrl)(character.costumeId
                ? getJsonAssets_1.charactersCostumes[character.costumeId].iconName
                : characterAsset.iconName),
            side: (0, getAssetUrl_1.getAssetUrl)(character.costumeId
                ? getJsonAssets_1.charactersCostumes[character.costumeId].sideIconName
                : characterAsset.sideIconName),
        };
        this.weapon = new index_1.CharacterWeapon(lang, character.equipList.filter((x) => x.weapon)[0]);
        this.reluquary = character.equipList
            .filter((x) => x.reliquary)
            .map((reliquary) => new index_1.CharacterReluquary(lang, reliquary));
        this.stats = new characterStats_1.CharacterStats(character.fightPropMap);
        this.constellation = ((characterAsset === null || characterAsset === void 0 ? void 0 : characterAsset.talents) || []).map((talent) => new index_1.CharacterConstellation(lang, talent, (character === null || character === void 0 ? void 0 : character.talentIdList) || []));
        this.skills = ((characterAsset === null || characterAsset === void 0 ? void 0 : characterAsset.skills) || []).map((skill) => {
            var _a;
            return new characterSkill_1.CharacterSkill(lang, skill, (character === null || character === void 0 ? void 0 : character.skillLevelMap[skill]) || 0, (_a = character === null || character === void 0 ? void 0 : character.proudSkillExtraLevelMap) !== null && _a !== void 0 ? _a : {});
        });
        this.skillSetId = character.skillDepotId;
        this.skillData = character.inherentProudSkillList;
        this.level = Number(((_a = character.propMap["4001"]) === null || _a === void 0 ? void 0 : _a.ival) || 0);
        this.elevations = Number(((_b = character.propMap["1002"]) === null || _b === void 0 ? void 0 : _b.ival) || 0);
        this.xp = Number(((_c = character.propMap["1001"]) === null || _c === void 0 ? void 0 : _c.ival) || 0);
        this.friendshipLevel = character.fetterInfo.expLevel;
    }
}
exports.Character = Character;
//# sourceMappingURL=character.js.map